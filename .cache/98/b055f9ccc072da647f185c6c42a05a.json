{"id":"../node_modules/redux/lib/compose.js","dependencies":[{"name":"/Users/Chaucha/Documents/JavaScript Projects/pianucci-barberia/package.json","includedInParent":true,"mtime":1567309694886},{"name":"/Users/Chaucha/Documents/JavaScript Projects/pianucci-barberia/node_modules/redux/package.json","includedInParent":true,"mtime":1461500315000}],"generated":{"js":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = compose;\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\n\nfunction compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  } else {\n    var _ret = function () {\n      var last = funcs[funcs.length - 1];\n      var rest = funcs.slice(0, -1);\n      return {\n        v: function v() {\n          return rest.reduceRight(function (composed, f) {\n            return f(composed);\n          }, last.apply(undefined, arguments));\n        }\n      };\n    }();\n\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/redux/lib/compose.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/redux/lib/compose.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}}],"sources":{"../node_modules/redux/lib/compose.js":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = compose;\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\n\nfunction compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  } else {\n    var _ret = function () {\n      var last = funcs[funcs.length - 1];\n      var rest = funcs.slice(0, -1);\n      return {\n        v: function v() {\n          return rest.reduceRight(function (composed, f) {\n            return f(composed);\n          }, last.apply(undefined, arguments));\n        }\n      };\n    }();\n\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n}"},"lineCount":40}},"error":null,"hash":"e9f5c2617f6da8d3c149f13e2c51dd10","cacheData":{"env":{}}}